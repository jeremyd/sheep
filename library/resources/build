
# -*- mode: shell-script;  -*-

build() {

  # these describe the options that we want the get resource to have.
  # on a successful run, the parse funtion will remove all values that are specified
    required_inputs=(
'BUILD_STEPS="a list of build steps"'
'BUILD_CHECKS="a list of checks to trigger a rebuild"'
'MD5="md5 of the source tarball"'
'SPOT_CHECKS="a list of spot checks to run"'
)

  # parse command line inputs 
  parse_inputs $@


  # make sure that all required params were set
  if ! test "$(${required_inputs[*]} | tr -d ' ')" == '' ; then 
    echo all required inputs were not found. returning 1
    return 1
  fi

  # dereference the array that was passed as the BUILD_CHECKS variable
  declare -a build_checks=("${!BUILD_CHECKS}")

  need_to_rebuild=
  for i in "${build_checks[@]}"; do 
    echo about to run $i
    if ! `eval $i` ; then
      need_to_rebuild=1
    fi
  done

  if test -z $need_to_rebuild; then 
    echo all build checks were ok so not building
    return 0
  fi

  # dereference the array that was passed as the BUILD_STEPS variable
  declare -a build_steps=("${!BUILD_STEPS}")

  # verify md5 of file in cache
  verify_cached_file $MD5

# we'll put something here to skip builds if they are completed
#  if ! [  -d root/lib  ] ; then
  for i in "${build_steps[@]}" ; do
      echo i is $i
      eval $i
  done
#  fi

  debug "finished install. running spot checks..."

  # dereference the array that was passed as the BUILD_STEPS variable
  declare -a spot_checks=("${!SPOT_CHECKS}")

  for i in "${spot_checks[@]}" ; do
    eval $i
  done
  
}
