#!/bin/bash
#
# wrapper for sheep tests
#

# cd into my dir
cd $(dirname $0)

# set sheep dir
export SHEEP_DIR=$(dirname $(pwd))

# get power to print colored output
source $SHEEP_DIR/library/core && colors

# specify tests to run
failed_tests=0
if test -z $1 ; then 
    tests_to_run=(
        "false"
        "true"
        "core"
        "modules"
        "hash_store"
        "resources/get"
        "false"
    )
else 
  tests_to_run=( "$1"  )
fi


# we are going to use this when we run tests later
run_test() {
  
  # rember start time
  local start_time=$SECONDS

  # reset colors
  echo -n ${txtrst}

  # run test
  eval ./$1

  # save output
  local result=$?

  local time_taken=$((SECONDS - start_time)) # calculate run time
  local test_output=$(printf "%20s\n" $test) # format test result output
  local time_output=$(printf "%4ss\n" $time_taken) # format time result output

  # use red text for failed tests, green for successfull
  if test $result -eq 0; then 

    echo -en "${txtgrn}$test_output"

    # report time as red if tests take longer than 1 seconds, green otherwise
    if test $time_taken -ge 1 ; then 
      echo -e "${txtred} $time_output${txtrst}"
    else 
      echo -e " $time_output${txtrst}"
    fi
  
  else 
    echo "${txtred}$test_output $time_output${txtrst}"
    failed_tests=$((failed_tests + 1))
  fi 

}

echo ${txtblu} # set text to blue
echo "runing ${#tests_to_run[@]} tests:"
echo 

# run each test in the $tests_to_run variable
for test in ${tests_to_run[@]}; do 
  run_test $test
done

# calculate runtime 
seconds_taken=$SECONDS

echo ${txtblu} # set text to blue
echo "ran ${#tests_to_run[@]} tests in $((SECONDS / 60)) minutes $((SECONDS % 60)) seconds:"
echo ${txtred} # set text to red
echo -e "  $failed_tests \tfailed (two are supposed to fail)" 
echo -e "${txtgrn}  $(( ${#tests_to_run[@]} - failed_tests )) \tpassed"
echo 

exit $failed_tests
