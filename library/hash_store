SHEEP_HASHSTORE_DIR=$SHEEP_DIR/cache/hash_store

get_hash() {
  if test -z $1 ; then 
    echo you did not provide a keyname
    return 1
  fi
  
  if ! test -f $SHEEP_HASHSTORE_DIR/$1 ; then 
    echo "hash $1 does not exist! exiting"
    return 1
  fi

  cat $SHEEP_HASHSTORE_DIR/$1
}

put_hash() {

  if test -z $1 ; then 
    echo you did not provide a keyname
    return 1
  fi

  bar=
  while read foo ; do 
    if ! test -z "$bar"; then
      bar+=$'\n'
    fi 
    bar+=$foo
  done

  mkdir -p $SHEEP_HASHSTORE_DIR/$(dirname $1)
  echo "$bar" > $SHEEP_HASHSTORE_DIR/$1

}

recursive_remove_if_empty() {
  if test -z "$1" || test -z "$2" ; then 
    echo "you did not provide proper arguments"
    return 1
  fi

  local deep_dir=$1
  local stop_dir=$2

  if test "$deep_dir" == "$stop_dir" ; then 
    return 0
  fi

  if test  "$(ls -A $deep_dir)" ; then 
    return 0
  else 
    rmdir $deep_dir
    eval $FUNCNAME "$(dirname $deep_dir)" "$stop_dir"
    return $?
  fi
  # should never run
  return 1
}


delete_hash() {
  if test -z $1 ; then 
    echo you did not provide a hash to delete!
    return 1
  fi

  if ! test -f $SHEEP_HASHSTORE_DIR/$1 ; then 
    echo the hash $1 does not exist
    return 0
  fi 
  
  echo removing hash $1
  rm $SHEEP_HASHSTORE_DIR/$1
  recursive_remove_if_empty "$(dirname $SHEEP_HASHSTORE_DIR/$1)" "$SHEEP_HASHSTORE_DIR"
  return $?
}

list_hashes() {
  if test -z "$1"; then 
    echo you did not provide a prefix to search 
    return 1
  fi 

  if test -d $SHEEP_HASHSTORE_DIR/$1 ; then 
    local query_dir="$SHEEP_HASHSTORE_DIR/$1"
  elif test -d $(dirname $SHEEP_HASHSTORE_DIR/$1) ; then 
    local query_dir="$(dirname $SHEEP_HASHSTORE_DIR/$1)"
  else
    echo 
    echo nothing matches that prefix
    echo
    return 0
  fi

  echo 
  cd $query_dir
  matches="$(find . -type f)"
  if test -z "$matches" ; then 
    echo no matches were found 
  else 
    echo found the following matches:
    echo
  fi 

  for i in $matches ; do 
    echo ${i:2}
  done 
  echo 
  cd - > /dev/null

  return 0
}
